call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'preservim/nerdcommenter'
Plug 'hashivim/vim-terraform'
Plug 'preservim/vim-markdown'
Plug 'fatih/vim-go'
Plug 'pangloss/vim-javascript'
Plug 'mileszs/ack.vim'
Plug 'github/copilot.vim'

call plug#end()

" Tabs are 2 columns wide, and use the TAB character
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab

" Disable all sorts of bells and visual alerts
set visualbell t_vb=
set novisualbell

" Autoindent, I love you
filetype indent on
set autoindent

" Add 'o' formatoption to continue comment characters during F2/F3
set formatoptions=tcqo

" Turn on search term highlighting
set hlsearch

" Save bkp, swp and undo in /tmp  instead of the working directory
set backupdir=/tmp//
set directory=/tmp//
set undodir=/tmp//

" Print representations of trailing spaces, tabs and end-of-line
highlight SpecialKey ctermfg=LightGray
highlight NonText    ctermfg=LightGray
set listchars=tab:\\-,trail:.,eol:$
set list

" Show line numbers in Dark Gray, and use as little space
" as possible on the left margin for displaying them.
set number
set numberwidth=1
highlight LineNr ctermfg=LightGray

" Fix folded code highlighting
highlight clear folded
highlight folded term=bold ctermfg=4 guifg=DarkBlue


" Turn on syntax higlighting on
syntax on
" ... and don't forget gvim
if has('gui_running')
	color slate
endif

colorscheme paramount
autocmd BufEnter *.md colorscheme molokai


" Turn on modeline processing, so we can force certain vim
" parameters when we don't match an autocommand.
set modeline

" Turn on marker foldmethod, to make things easier
set foldmethod=marker

" Turn off stupid cindent rules, until I can figure out
" how to customize them to my coding style.
set nocindent

" custom status line
set laststatus=2

function! GitBranch()
  " FIXME
  " return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#TabLineSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#StatusLine#
set statusline+=\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#StatusLineNC#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\

set wildmode=longest,list


" Highhlights cursor line
set cursorline

" Adds support for ack
let g:ackprg = 'ag --vimgrep --smart-case'
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack

noremap <Leader>a :Ack <cword><cr>

"""
"""
""" ###   Copy/Paste Support   ###############################################
"""

"""   ;cp - Set for COPY mode (turn off non-printing chars)
map ;cp :set nonumber<CR>:set nolist<CR>



imap <silent> <C-j> <Plug>(copilot-next)


"""   ;pc - Opposite of ;cp - turns on non-printing chars
map ;pc :set number<CR>:set list<CR>

set pastetoggle=<F2>

"""
"""
""" ###   Whitespace Management   ############################################
"""

"""   ;n - Collapse successive empty (spaces or tabs allowed) lines
map ;n GoZ<Esc>:g/^[ <Tab>]*$/.,/[^ <Tab>]/-j<CR>Gdd

"""   ;c - Clear leading spaces and enter insertion mode
map ;c :,s/^[ <Tab>]*//g<CR>i

"""   ;fws - Fix trailing whitespace issues
map ;fws :%s/\s\+$//

"""
"""
""" ###   Source Vimrc ############################################
"""
noremap <leader>sv :source $MYVIMRC<CR>

"################################################################################
"#### AUTOCOMMANDS ##############################################################

" Wrap text in git commit message at 72 characters, as I type.
au BufNewFile,BufRead .git/COMMIT_EDITMSG     set tw=72 wrap

" Catalyst Views should be ft=mason for syntax highlighting
au BufNewFile,BufRead *.tt set ft=mason

" YAML files get special tabbing settings
au BufNewFile,BufRead *.yml  set et ts=2 sw=2 sts=2
au BufNewFile,BufRead *.yaml set et ts=2 sw=2 sts=2

" Makefiles require tabs
au FileType make set noexpandtab shiftwidth=4 softtabstop=0

" Python files get special tabbing settings
au FileType python set expandtab ts=4
au BufNewFile,BufRead *.py set expandtab ts=4

set nowrap
set nocompatible
set bs=2
set history=50
syntax on
set viminfo='20,\"50
if filereadable($VIMRUNTIME . "/ftplugin/man.vim")
        source $VIMRUNTIME/ftplugin/man.vim
endif
if filereadable($VIMRUNTIME . "/syntax/man.vim")
        source $VIMRUNTIME/syntax/man.vim
endif

set clipboard=unnamed

set splitright
cabbrev man Man

" functions to make cursor restore work
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction


augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" Makes markdown files to wrap by default
augroup WrapLineInTeXFile
    autocmd!
    autocmd FileType markdown setlocal wrap
augroup END

autocmd FileType markdown setlocal wrap

let mapleader = ","
" set up ctrlp / ,f searching
set runtimepath^=~/.vim/bundle/ctrlp.vim
map <leader>f <C-p>

" Ignore node_modules, DS_Store and git
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git$'
let g:ctrlp_show_hidden=1

" set up git blame mapping
map <leader>g :Gblame<Enter>

set nolist

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

let g:go_fmt_command = "goimports"

" Fmt on save for terraform files
let g:terraform_fmt_on_save=1

" Remove trailing whitespace
if has("autocmd")
  autocmd BufWritePre * :%s/\s\+$//e
endif

execute pathogen#infect()

