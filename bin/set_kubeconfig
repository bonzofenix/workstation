#!/usr/bin/env bash

set -o pipefail -e +x

print_usage() {
  echo "Usage: $(basename "$0") ENVIRONMENT DIRECTOR/DEPLOYMENT_NAME APISERVER_URL"
  echo ""
  echo "Example: $(basename $0) some_env lite/cfcr https://kubernetes:8443"
  echo ""
}

set_kubeconfig() {
  set +x

  env="${1}"
  cluster="${2}"
  apiserver="${3}"

  if [[ $# -ne 3 ]]; then
    print_usage
    exit  1
  fi

  tmp_ca_file="$(mktemp)"
  store_file="$(mktemp)"

  trap 'rm "${tmp_ca_file}"' EXIT

  spruce merge ~/workspace/configs/$env/kubo/store.yml > $store_file

  bosh int $store_file --path=/tls-kubernetes/ca > "${tmp_ca_file}"
  admin_password=$(bosh int $store_file --path=/kubo-admin-password)

  cluster_name="cfcr/${cluster}"
  user_name="${cluster_name}/cfcr-admin"
  context_name="${cluster_name}"

  kubectl config set-cluster "${cluster_name}" --server="${apiserver}" --certificate-authority="${tmp_ca_file}" --embed-certs=true
  kubectl config set-credentials "${user_name}" --token="${admin_password}"
  kubectl config set-context "${context_name}" --cluster="${cluster_name}" --user="${user_name}"
  kubectl config use-context "${context_name}"

  echo "Created new kubectl context ${context_name}"
  echo "Try running the following command:"
  echo "  kubectl get pods --namespace=kube-system"
}

[[ "$0" == "${BASH_SOURCE[0]}" ]] && set_kubeconfig "$@"
